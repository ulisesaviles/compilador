const rules: { [rule: string]: string[] } = {
  BLOCK_OF_CODE: [
    "DECLARATION",
    "IF_SENTENCE",
    "SWITCH_SENTENCE",
    "FOR_SENTENCE",
    "BREAK_SENTENCE",
    // "BLOCK_OF_CODE BLOCK_OF_CODE",
    "epsilon",
  ],
  DECLARATION: [
    "VAR STRING ID ASSIGNATION STRING_VALUE END_OF_LINE",
    "VAR NUMBER ID ASSIGNATION NUMERIC_VALUE END_OF_LINE",
    "VAR BOOL ID ASSIGNATION BOOLEAN_VALUE END_OF_LINE",
  ],
  OPERATION: [
    "NUMERIC_TERMINAL OP_SUM NUMERIC_TERMINAL",
    "NUMERIC_TERMINAL OP_SUBS NUMERIC_TERMINAL",
    "NUMERIC_TERMINAL OP_MULTI NUMERIC_TERMINAL",
    "NUMERIC_TERMINAL OP_DIV NUMERIC_TERMINAL",
  ],
  COMPARISON: [
    "NUMERIC_TERMINAL LESS NUMERIC_TERMINAL",
    "NUMERIC_TERMINAL LESS_OR_EQUAL NUMERIC_TERMINAL",
    "NUMERIC_TERMINAL EQUALS NUMERIC_TERMINAL",
    "NUMERIC_TERMINAL DIFFERENT NUMERIC_TERMINAL",
    "NUMERIC_TERMINAL GREATER_OR_EQUAL NUMERIC_TERMINAL",
    "NUMERIC_TERMINAL GREATER NUMERIC_TERMINAL",
  ],
  NUMERIC_VALUE: ["NUMERIC_TERMINAL", "OPERATION"],
  NUMERIC_TERMINAL: ["NUM", "ID", "DECIMAL"],
  BOOLEAN_VALUE: [
    "BOOLEAN_TERMINAL",
    "BOOLEAN_TERMINAL AND BOOLEAN_TERMINAL",
    "BOOLEAN_TERMINAL OR BOOLEAN_TERMINAL",
  ],
  BOOLEAN_TERMINAL: ["TRUE", "FALSE", "ID", "COMPARISON"],
  IF_SENTENCE: [
    "IF PARENTHESIS_OPEN BOOLEAN_VALUE PARENTHESIS_CLOSED BRACES_OPEN BLOCK_OF_CODE BRACES_CLOSED",
  ],
  ELSE_SENTENCE: ["ELSE BRACES_OPEN BLOCK_OF_CODE BRACES_CLOSED"],
  SWITCH_SENTENCE: [
    "SWITCH BRACES_OPEN CASES DEFAULT BRACES_OPEN BLOCK_OF_CODE BRACES_CLOSED BRACES_CLOSED",
  ],
  CASES: [
    "CASE PARENTHESIS_OPEN BOOLEAN_VALUE PARENTHESIS_CLOSED BRACES_OPEN BLOCK_OF_CODE BRACES_CLOSED",
  ],
  FOR_SENTENCE: [
    "FOR PARENTHESIS_OPEN DECLARATION COMMA BOOLEAN_VALUE COMMA NUMERIC_VALUE PARENTHESIS_CLOSED BRACES_OPEN BLOCK_OF_CODE BRACES_CLOSED",
  ],
  BREAK_SENTENCE: ["BREAK END_OF_LINE"],
};

export default rules;
